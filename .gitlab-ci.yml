---
stages:
  - dependencies
  - build
  - test
  - checks
  - publish

variables:
  SCCACHE_GCS_BUCKET: umpyre-sccache
  SCCACHE_GCS_RW_MODE: READ_WRITE
  SCCACHE_GCS_KEY_PATH: /tmp/storage-key.json
  DOCKER_DRIVER: overlay2
  CARGO_HOME: $CI_PROJECT_DIR/.cargo

before_script:
  - echo $GCS_STORAGE_KEY > $SCCACHE_GCS_KEY_PATH

create builder:
  stage: dependencies
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - api_failure
  allow_failure: true
  image: docker:stable
  only:
    refs:
      - master
  services:
    - docker:dind
  before_script:
    - set -- $CI_JOB_NAME
    - export DOCKER_HOST="${DOCKER_HOST:-tcp://localhost:2375/}"
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/builder:latest || true
    - docker pull rustlang/rust:nightly || true
  script:
    - >
      docker build -f Dockerfile.builder
      --cache-from $CI_REGISTRY_IMAGE/builder:latest
      --cache-from rustlang/rust:nightly
      --tag $CI_REGISTRY_IMAGE/builder:latest
      .
    - docker push $CI_REGISTRY_IMAGE/builder:latest

.build_script: &build_script
  stage: build
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - api_failure
  image: $CI_REGISTRY_IMAGE/builder:latest
  script:
    - set -- $CI_JOB_NAME
    - export TARGET=$1
    - echo Running build for TARGET=$TARGET
    - cargo build --verbose --all
  artifacts:
    paths:
      - target/
    expire_in: 30 days
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .cargo/registry

x86_64-unknown-linux-gnu build: *build_script

.test_script: &test_script
  stage: test
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - api_failure
  image: $CI_REGISTRY_IMAGE/builder:latest
  script:
    - set -- $CI_JOB_NAME
    - export TARGET=$1
    - cargo test --verbose --all --target $TARGET
    - |
      if [[ "$TARGET" == "x86_64-unknown-linux-gnu" ]]; then
        cargo tarpaulin --out Xml && bash <(curl -s https://codecov.io/bash)
      fi
  coverage: '/(\d+.\d+%) coverage,/'
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .cargo/registry

x86_64-unknown-linux-gnu test:
  <<: *test_script
  dependencies:
    - x86_64-unknown-linux-gnu build

clippy:
  stage: checks
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - api_failure
  image: $CI_REGISTRY_IMAGE/builder:latest
  script:
    - cargo clippy --all-targets --all-features -- -D warnings
  dependencies:
    - x86_64-unknown-linux-gnu build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .cargo/registry

rustfmt:
  stage: checks
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - api_failure
  image: $CI_REGISTRY_IMAGE/builder:latest
  script:
    - cargo fmt --all -- --check
  dependencies:
    - x86_64-unknown-linux-gnu build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .cargo/registry
